!classDefinition: #OOStackTest category: 'Stack-Exercise'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!OOStackTest methodsFor: 'test' stamp: 'LV 10/9/2022 18:46:09'!
test01StackShouldBeEmptyWhenCreated

	| stack |
	stack := OOStack new.
	
	self assert: stack isEmpty! !

!OOStackTest methodsFor: 'test' stamp: 'JMB 10/8/2022 17:59:57'!
test02PushAddElementsToTheStack

	| stack |
	stack := OOStack new.
	
	stack push: 'something'.
	
	self deny: stack isEmpty! !

!OOStackTest methodsFor: 'test' stamp: 'JMB 10/8/2022 17:59:50'!
test03PopRemovesElementsFromTheStack

	| stack |
	stack := OOStack new.
	stack push: 'something'.
	
	stack pop.
	
	self assert: stack isEmpty! !

!OOStackTest methodsFor: 'test' stamp: 'JMB 10/8/2022 17:59:43'!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: pushedObject equals: stack pop! !

!OOStackTest methodsFor: 'test' stamp: 'JMB 10/8/2022 17:56:59'!
test05StackBehavesLIFO

	| stack firstPushedObject secondPushedObject |
	
	stack := OOStack new.
	firstPushedObject := 'first'.
	secondPushedObject := 'second'.
	
	stack push: firstPushedObject.
	stack push: secondPushedObject.
	
	self assert: secondPushedObject equals: stack pop.
	self assert: firstPushedObject equals: stack pop.
	self assert: stack isEmpty 
	! !

!OOStackTest methodsFor: 'test' stamp: 'JMB 10/8/2022 18:00:26'!
test06TopReturnsLastPushedObject

	| stack pushedObject |
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: pushedObject equals: stack top.
	! !

!OOStackTest methodsFor: 'test' stamp: 'JMB 10/8/2022 17:58:27'!
test07TopDoesNotRemoveObjectFromStack

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: 1 equals: stack size.
	stack top.
	self assert: 1 equals: stack size.
	! !

!OOStackTest methodsFor: 'test' stamp: 'JMB 10/8/2022 17:58:44'!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: OOStack stackEmptyErrorDescription equals: anError messageText ]
		
! !

!OOStackTest methodsFor: 'test' stamp: 'JMB 10/8/2022 17:58:56'!
test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects

	| stack  |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: OOStack stackEmptyErrorDescription equals: anError messageText ]
		
! !

!OOStackTest methodsFor: 'test' stamp: 'JMB 10/8/2022 17:59:07'!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: OOStack stackEmptyErrorDescription equals: anError messageText ]
		
! !


!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'LV 10/13/2022 12:28:32'!
test01CanNotFindAnEmptyPrefix
	
	| stack  sentenceFinder  firstPushedObject prefix |
	
	stack := OOStack new.
	firstPushedObject := 'Hola como estas'.
	stack push:firstPushedObject .
	 
	sentenceFinder := SentenceFinderByPrefix new.
	sentenceFinder initializeWith: stack.
	
	prefix :=''.
	
	self
		should: [ sentenceFinder find: prefix .]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: SentenceFinderByPrefix isNotAValidPrefix equals: anError messageText ]! !

!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'LV 10/13/2022 12:27:41'!
test02CanNotFindAPrefixWithSpace

	| stack  sentenceFinder  firstPushedObject prefix |
	
	stack := OOStack new.
	firstPushedObject := 'Hola como estas'.
	stack push:firstPushedObject .
	 
	sentenceFinder := SentenceFinderByPrefix new.
	sentenceFinder initializeWith: stack.
	
	prefix := 'H o'.
	
	self
		should: [ sentenceFinder find: prefix .]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: SentenceFinderByPrefix isNotAValidPrefix equals: anError messageText ]! !

!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'LV 10/13/2022 12:29:13'!
test03CanNotFindAPrefixAsASpace
	
	| stack  sentenceFinder  firstPushedObject prefix |
	
	stack := OOStack new.
	firstPushedObject := 'Hola como estas'.
	stack push:firstPushedObject .
	 
	sentenceFinder := SentenceFinderByPrefix new.
	sentenceFinder initializeWith: stack.
	
	prefix := ' '.
	
	self
		should: [ sentenceFinder find: prefix .]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: SentenceFinderByPrefix isNotAValidPrefix equals: anError messageText ]! !

!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'LV 10/13/2022 12:30:06'!
test04SentenceFinderDoesNotFoundAPrefix
	
	| stack  sentenceFinder  firstPushedObject prefix |
	
	stack := OOStack new.
	firstPushedObject := 'Hola como estas'.
	stack push:firstPushedObject .
	 
	sentenceFinder := SentenceFinderByPrefix new.
	sentenceFinder initializeWith: stack.
	
	prefix := 'Co'.
	
	self
		should: [ sentenceFinder find: prefix .]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: SentenceFinderByPrefix canNotFindThePrefix equals: anError messageText ]! !

!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'LV 10/13/2022 12:32:55'!
test05SentenceFinderFindOneCoincidence

	| stack coincidences sentenceFinder  firstPushedObject secondPushedObject |
	
	stack := OOStack new.
	firstPushedObject := 'Hola como estas'.
	secondPushedObject := 'Me llamo tomas'.
	
	stack push:firstPushedObject .
	stack push: secondPushedObject .
	
	sentenceFinder := SentenceFinderByPrefix new.
	sentenceFinder initializeWith: stack.
	
	coincidences :=  sentenceFinder find:'Ho'.
	
	self assert: (coincidences =  (OrderedCollection with: firstPushedObject)).! !

!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'LV 10/13/2022 12:30:56'!
test06StackDoesNotChangeWhenSentenceFinderLookForAPrefix

	| stack auxiliaryStack coincidences sentenceFinder  firstPushedObject secondPushedObject prefix |
	
	stack := OOStack new.
	auxiliaryStack := stack.
	firstPushedObject := 'Hola como estas'.
	secondPushedObject := 'Me llamo tomas'.
	stack push:firstPushedObject .
	stack push: secondPushedObject .
	
	sentenceFinder := SentenceFinderByPrefix new.
	sentenceFinder initializeWith: stack.
	prefix := 'Ho'.
	
	coincidences :=  sentenceFinder find: prefix .
	
	self assert: (coincidences =  (OrderedCollection with: firstPushedObject)).
	
	self assert: (stack = auxiliaryStack ).
	! !

!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'LV 10/13/2022 12:30:34'!
test07NoSentencesFindedInAnEmptyStack
	
	| stack sentenceFinder prefix |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	sentenceFinder initializeWith: stack.
	
	prefix := 'Co'.
	
	self
		should: [ sentenceFinder find: prefix .]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: SentenceFinderByPrefix canNotLookForAPrefixInAEmptyStack equals: anError messageText ]! !

!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'LV 10/13/2022 12:31:48'!
test08SentenceFinderFindMoreThanOneCoincidence

	| stack coincidences sentenceFinder  firstPushedObject secondPushedObject thirdPushedObject |
	
	stack := OOStack new.
	firstPushedObject := 'Hola como estas'.
	secondPushedObject := 'Me llamo tomas'.
	thirdPushedObject := 'Holanda pecho frio'.
	
	stack push:firstPushedObject .
	stack push: secondPushedObject .
	stack push: thirdPushedObject .
	
	sentenceFinder := SentenceFinderByPrefix new.
	sentenceFinder initializeWith: stack.
	
	coincidences :=  sentenceFinder find:'Ho'.
	
	self assert: (coincidences =  (OrderedCollection with: firstPushedObject with: thirdPushedObject)).
	
	
	
	
	
	
	! !


!classDefinition: #OOStack category: 'Stack-Exercise'!
Object subclass: #OOStack
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!OOStack methodsFor: 'operations' stamp: 'LV 10/11/2022 20:17:10'!
pop
	
	^elements remove: self top.
	
	! !

!OOStack methodsFor: 'operations' stamp: 'LV 10/11/2022 20:17:10'!
push: unaOracion
	
	elements add: unaOracion.! !

!OOStack methodsFor: 'operations' stamp: 'LV 10/11/2022 20:17:10'!
size
	
	^elements size.
	! !

!OOStack methodsFor: 'operations' stamp: 'LV 10/9/2022 19:16:49'!
top
	
	^self state top! !

!OOStack methodsFor: 'operations' stamp: 'LV 10/11/2022 21:15:50'!
topWhenStackIsEmpty

	^self signalErrorStackShouldNotBeEmpty ! !

!OOStack methodsFor: 'operations' stamp: 'LV 10/12/2022 14:07:50'!
topWhenStackIsNotEmpty
	
	^elements last! !


!OOStack methodsFor: 'testing' stamp: 'LV 10/11/2022 20:17:10'!
initialize
	
	elements := OrderedCollection new.! !

!OOStack methodsFor: 'testing' stamp: 'LV 10/11/2022 20:17:10'!
isEmpty
	
	^(elements isEmpty).! !

!OOStack methodsFor: 'testing' stamp: 'LV 10/11/2022 20:47:18'!
state

	^OOStackState stateOf: self.
	
	
	
	
	! !


!OOStack methodsFor: 'error' stamp: 'LV 10/9/2022 18:23:03'!
signalErrorStackShouldNotBeEmpty

	 self error: self class stackEmptyErrorDescription .! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'OOStack class' category: 'Stack-Exercise'!
OOStack class
	instanceVariableNames: ''!

!OOStack class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 5/7/2012 11:51'!
stackEmptyErrorDescription
	
	^ 'Stack is empty'! !


!classDefinition: #OOStackState category: 'Stack-Exercise'!
Object subclass: #OOStackState
	instanceVariableNames: 'mainStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!OOStackState methodsFor: 'operations' stamp: 'LV 10/9/2022 19:35:09'!
top
	
	self subclassResponsibility .! !


!OOStackState methodsFor: 'testing' stamp: 'LV 10/12/2022 13:59:19'!
initializeWith: aStack

	mainStack := aStack .! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'OOStackState class' category: 'Stack-Exercise'!
OOStackState class
	instanceVariableNames: ''!

!OOStackState class methodsFor: 'as yet unclassified' stamp: 'LV 10/11/2022 20:57:41'!
actualState: aStack
	
	self subclassResponsibility .! !

!OOStackState class methodsFor: 'as yet unclassified' stamp: 'LV 10/12/2022 14:31:43'!
newWithState:aStack
	
	^self new initializeWith: aStack.! !

!OOStackState class methodsFor: 'as yet unclassified' stamp: 'LV 10/12/2022 14:31:43'!
stateOf: aStack
	
	^(self subclasses detect:[: aStateOfStack |  aStateOfStack actualState: aStack ]) newWithState: aStack.
	
	 ! !


!classDefinition: #OOStateEmpty category: 'Stack-Exercise'!
OOStackState subclass: #OOStateEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!OOStateEmpty methodsFor: 'operations' stamp: 'LV 10/12/2022 14:22:27'!
top
	
	^mainStack topWhenStackIsEmpty.
	! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'OOStateEmpty class' category: 'Stack-Exercise'!
OOStateEmpty class
	instanceVariableNames: ''!

!OOStateEmpty class methodsFor: 'as yet unclassified' stamp: 'LV 10/12/2022 14:23:50'!
actualState: aStack
	
	^aStack isEmpty. ! !


!classDefinition: #OOStateEmptyNot category: 'Stack-Exercise'!
OOStackState subclass: #OOStateEmptyNot
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!OOStateEmptyNot methodsFor: 'operations' stamp: 'LV 10/12/2022 14:22:40'!
top
	
	^mainStack topWhenStackIsNotEmpty ! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'OOStateEmptyNot class' category: 'Stack-Exercise'!
OOStateEmptyNot class
	instanceVariableNames: ''!

!OOStateEmptyNot class methodsFor: 'as yet unclassified' stamp: 'LV 10/12/2022 14:23:44'!
actualState: aStack
	
	^aStack isEmpty not. ! !


!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack sentences'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LV 10/12/2022 17:57:44'!
compare: aSentence withA: aPrefix
	
	( aSentence beginsWith: aPrefix ) ifTrue:[ sentences addFirst: aSentence ].
	
	
! !

!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LV 10/12/2022 23:11:07'!
find: aPrefix

	(self isThisPrefixInvalid: aPrefix ) ifTrue:[^self error: self class isNotAValidPrefix].
	
	self lookForPrefixInStack: aPrefix.
	
	sentences isEmpty ifTrue: [^ self error: self class canNotFindThePrefix].
	
	^sentences
	
	 
							
	
	
	
	

	! !

!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LV 10/12/2022 17:55:23'!
initializeWith: aStack 
	
	stack := aStack.
	
	sentences := OrderedCollection new.
	! !

!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LV 10/12/2022 18:03:32'!
isThisPrefixInvalid: aPrefix

	^(aPrefix isEmpty or:[ aPrefix includes: $ ]).
	
	! !

!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LV 10/12/2022 23:29:24'!
lookForPrefixInStack: aPrefix

	|sentence|

	(stack isEmpty) ifTrue:[^self error: self class canNotLookForAPrefixInAEmptyStack].
	
	stack size timesRepeat: [ sentence := stack pop.  self compare: sentence withA: 	aPrefix ].! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'SentenceFinderByPrefix class' category: 'Stack-Exercise'!
SentenceFinderByPrefix class
	instanceVariableNames: ''!

!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'LV 10/12/2022 23:11:07'!
canNotFindThePrefix
	
	^'El prefijo no se encuentra entre las oraciones'! !

!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'LV 10/12/2022 23:29:49'!
canNotLookForAPrefixInAEmptyStack

	'No puedo buscar un prefijo en un stack vacio'.! !

!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'LV 10/12/2022 17:33:42'!
isNotAValidPrefix
	
	^'El prefijo no es valido'! !
